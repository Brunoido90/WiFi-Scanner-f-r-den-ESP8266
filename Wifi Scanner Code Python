#include <ESP8266WiFi.h>
#include <Wire.h>
#include <U8g2lib.h>

// Initialize OLED Display (adjust for your setup)
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

void setup() {
  // Start Serial Monitor
  Serial.begin(115200);
  
  // Initialize the OLED display
  u8g2.begin();
  u8g2.clearDisplay();

  // Initialize WiFi
  WiFi.mode(WIFI_STA);
  WiFi.disconnect(); // Disconnect any previous connections
  delay(100);

  // Display startup message
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.drawStr(0, 10, "WiFi Scanner");
  u8g2.drawStr(0, 30, "Scanning...");
  u8g2.sendBuffer();
  delay(2000);
}

void loop() {
  // Scan for available WiFi networks
  int n = WiFi.scanNetworks();
  
  // Clear OLED display
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_6x10_tf);
  u8g2.drawStr(0, 10, "WiFi Networks:");

  if (n == 0) {
    u8g2.drawStr(0, 30, "No networks found.");
  } else {
    int yOffset = 20;

    for (int i = 0; i < n && i < 6; i++) { // Display up to 6 networks
      String ssid = WiFi.SSID(i);
      int rssi = WiFi.RSSI(i);
      String security = (WiFi.encryptionType(i) == ENC_TYPE_NONE) ? "Open" : "Secured";

      // Format network details
      char networkInfo[50];
      snprintf(networkInfo, 50, "%d: %s (%ddBm) %s", i + 1, ssid.c_str(), rssi, security.c_str());

      // Print to OLED
      u8g2.drawStr(0, yOffset, networkInfo);
      yOffset += 10; // Move to the next line
    }
  }

  // Send the buffer to display content
  u8g2.sendBuffer();

  // Wait 10 seconds before rescanning
  delay(10000);
}
